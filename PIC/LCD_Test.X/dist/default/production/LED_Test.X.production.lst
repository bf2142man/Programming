

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Sat May 28 11:04:05 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	16F883
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2
    17                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    18                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    19                           	dabs	1,0x7E,2
    20  0000                     
    21                           ; Version 2.40
    22                           ; Generated 17/11/2021 GMT
    23                           ; 
    24                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution. Publication is not required when
    38                           ;        this file is used in an embedded application.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC16F883 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     	;# 
    57  0001                     	;# 
    58  0002                     	;# 
    59  0003                     	;# 
    60  0004                     	;# 
    61  0005                     	;# 
    62  0006                     	;# 
    63  0007                     	;# 
    64  0009                     	;# 
    65  000A                     	;# 
    66  000B                     	;# 
    67  000C                     	;# 
    68  000D                     	;# 
    69  000E                     	;# 
    70  000E                     	;# 
    71  000F                     	;# 
    72  0010                     	;# 
    73  0011                     	;# 
    74  0012                     	;# 
    75  0013                     	;# 
    76  0014                     	;# 
    77  0015                     	;# 
    78  0015                     	;# 
    79  0016                     	;# 
    80  0017                     	;# 
    81  0018                     	;# 
    82  0019                     	;# 
    83  001A                     	;# 
    84  001B                     	;# 
    85  001B                     	;# 
    86  001C                     	;# 
    87  001D                     	;# 
    88  001E                     	;# 
    89  001F                     	;# 
    90  0081                     	;# 
    91  0085                     	;# 
    92  0086                     	;# 
    93  0087                     	;# 
    94  0089                     	;# 
    95  008C                     	;# 
    96  008D                     	;# 
    97  008E                     	;# 
    98  008F                     	;# 
    99  0090                     	;# 
   100  0091                     	;# 
   101  0092                     	;# 
   102  0093                     	;# 
   103  0093                     	;# 
   104  0093                     	;# 
   105  0094                     	;# 
   106  0095                     	;# 
   107  0096                     	;# 
   108  0097                     	;# 
   109  0098                     	;# 
   110  0099                     	;# 
   111  009A                     	;# 
   112  009B                     	;# 
   113  009C                     	;# 
   114  009D                     	;# 
   115  009E                     	;# 
   116  009F                     	;# 
   117  0105                     	;# 
   118  0107                     	;# 
   119  0108                     	;# 
   120  0109                     	;# 
   121  010C                     	;# 
   122  010C                     	;# 
   123  010D                     	;# 
   124  010E                     	;# 
   125  010F                     	;# 
   126  0185                     	;# 
   127  0187                     	;# 
   128  0188                     	;# 
   129  0189                     	;# 
   130  018C                     	;# 
   131  018D                     	;# 
   132  0000                     	;# 
   133  0001                     	;# 
   134  0002                     	;# 
   135  0003                     	;# 
   136  0004                     	;# 
   137  0005                     	;# 
   138  0006                     	;# 
   139  0007                     	;# 
   140  0009                     	;# 
   141  000A                     	;# 
   142  000B                     	;# 
   143  000C                     	;# 
   144  000D                     	;# 
   145  000E                     	;# 
   146  000E                     	;# 
   147  000F                     	;# 
   148  0010                     	;# 
   149  0011                     	;# 
   150  0012                     	;# 
   151  0013                     	;# 
   152  0014                     	;# 
   153  0015                     	;# 
   154  0015                     	;# 
   155  0016                     	;# 
   156  0017                     	;# 
   157  0018                     	;# 
   158  0019                     	;# 
   159  001A                     	;# 
   160  001B                     	;# 
   161  001B                     	;# 
   162  001C                     	;# 
   163  001D                     	;# 
   164  001E                     	;# 
   165  001F                     	;# 
   166  0081                     	;# 
   167  0085                     	;# 
   168  0086                     	;# 
   169  0087                     	;# 
   170  0089                     	;# 
   171  008C                     	;# 
   172  008D                     	;# 
   173  008E                     	;# 
   174  008F                     	;# 
   175  0090                     	;# 
   176  0091                     	;# 
   177  0092                     	;# 
   178  0093                     	;# 
   179  0093                     	;# 
   180  0093                     	;# 
   181  0094                     	;# 
   182  0095                     	;# 
   183  0096                     	;# 
   184  0097                     	;# 
   185  0098                     	;# 
   186  0099                     	;# 
   187  009A                     	;# 
   188  009B                     	;# 
   189  009C                     	;# 
   190  009D                     	;# 
   191  009E                     	;# 
   192  009F                     	;# 
   193  0105                     	;# 
   194  0107                     	;# 
   195  0108                     	;# 
   196  0109                     	;# 
   197  010C                     	;# 
   198  010C                     	;# 
   199  010D                     	;# 
   200  010E                     	;# 
   201  010F                     	;# 
   202  0185                     	;# 
   203  0187                     	;# 
   204  0188                     	;# 
   205  0189                     	;# 
   206  018C                     	;# 
   207  018D                     	;# 
   208  001E                     _ADRESH	set	30
   209  001F                     _ADCON0	set	31
   210  0006                     _PORTBbits	set	6
   211  0007                     _PORTCbits	set	7
   212  0007                     _PORTC	set	7
   213  0006                     _PORTB	set	6
   214  003C                     _RC4	set	60
   215  00F9                     _GO_nDONE	set	249
   216  0033                     _RB3	set	51
   217  0032                     _RB2	set	50
   218  0031                     _RB1	set	49
   219  0030                     _RB0	set	48
   220  009E                     _ADRESL	set	158
   221  009F                     _ADCON1	set	159
   222  0087                     _TRISC	set	135
   223  0086                     _TRISB	set	134
   224  0189                     _ANSELH	set	393
   225                           
   226                           	psect	strings
   227  0002                     __pstrings:
   228  0002                     stringtab:
   229  0002                     __stringtab:
   230  0002                     stringcode:	
   231                           ;	String table - string pointers are 1 byte each
   232                           
   233  0002                     stringdir:
   234  0002  3000               	movlw	high stringdir
   235  0003  008A               	movwf	10
   236  0004  0804               	movf	4,w
   237  0005  0A84               	incf	4,f
   238  0006  0782               	addwf	2,f
   239  0007                     __stringbase:
   240  0007  3400               	retlw	0
   241  0008                     __end_of__stringtab:
   242  0008                     STR_1:
   243  0008  3420               	retlw	32	;' '
   244  0009  3448               	retlw	72	;'H'
   245  000A  3465               	retlw	101	;'e'
   246  000B  346C               	retlw	108	;'l'
   247  000C  346C               	retlw	108	;'l'
   248  000D  346F               	retlw	111	;'o'
   249  000E  3420               	retlw	32	;' '
   250  000F  3447               	retlw	71	;'G'
   251  0010  3472               	retlw	114	;'r'
   252  0011  3461               	retlw	97	;'a'
   253  0012  3468               	retlw	104	;'h'
   254  0013  3461               	retlw	97	;'a'
   255  0014  346D               	retlw	109	;'m'
   256  0015  3421               	retlw	33	;'!'
   257  0016  3400               	retlw	0
   258  0017                     STR_2:
   259  0017  3449               	retlw	73	;'I'
   260  0018  3474               	retlw	116	;'t'
   261  0019  3420               	retlw	32	;' '
   262  001A  3477               	retlw	119	;'w'
   263  001B  346F               	retlw	111	;'o'
   264  001C  3472               	retlw	114	;'r'
   265  001D  346B               	retlw	107	;'k'
   266  001E  3473               	retlw	115	;'s'
   267  001F  3400               	retlw	0
   268                           
   269                           	psect	cinit
   270  07FD                     start_initialization:	
   271                           ; #config settings
   272                           
   273  07FD                     __initialization:
   274  07FD                     end_of_initialization:	
   275                           ;End of C runtime variable initialization code
   276                           
   277  07FD                     __end_of__initialization:
   278  07FD  0183               	clrf	3
   279  07FE  118A  2F8E         	ljmp	_main	;jump to C main() function
   280                           
   281                           	psect	cstackCOMMON
   282  0070                     __pcstackCOMMON:
   283  0070                     ?_LCDPutCmd:
   284  0070                     ?_LCD_Initialize:	
   285                           ; 1 bytes @ 0x0
   286                           
   287  0070                     ?_ToggleEnable:	
   288                           ; 1 bytes @ 0x0
   289                           
   290  0070                     ??_ToggleEnable:	
   291                           ; 1 bytes @ 0x0
   292                           
   293  0070                     ?_LCDPutChar:	
   294                           ; 1 bytes @ 0x0
   295                           
   296  0070                     ?_LCDPutStr:	
   297                           ; 1 bytes @ 0x0
   298                           
   299  0070                     ?_ADC_Initialize:	
   300                           ; 1 bytes @ 0x0
   301                           
   302  0070                     ??_ADC_Initialize:	
   303                           ; 1 bytes @ 0x0
   304                           
   305  0070                     ?_main:	
   306                           ; 1 bytes @ 0x0
   307                           
   308                           
   309                           ; 1 bytes @ 0x0
   310  0070                     	ds	1
   311  0071                     ?_LCDWriteNibble:
   312  0071                     LCDWriteNibble@rs:	
   313                           ; 1 bytes @ 0x1
   314                           
   315                           
   316                           ; 1 bytes @ 0x1
   317  0071                     	ds	1
   318  0072                     ??_LCDWriteNibble:
   319  0072                     LCDWriteNibble@ch:	
   320                           ; 1 bytes @ 0x2
   321                           
   322                           
   323                           ; 1 bytes @ 0x2
   324  0072                     	ds	1
   325  0073                     ??_LCDPutCmd:
   326  0073                     ??_LCDPutChar:	
   327                           ; 1 bytes @ 0x3
   328                           
   329                           
   330                           ; 1 bytes @ 0x3
   331  0073                     	ds	2
   332  0075                     LCDPutChar@ch:
   333  0075                     LCDPutCmd@ch:	
   334                           ; 1 bytes @ 0x5
   335                           
   336                           
   337                           ; 1 bytes @ 0x5
   338  0075                     	ds	1
   339  0076                     ??_LCD_Initialize:
   340  0076                     ??_LCDPutStr:	
   341                           ; 1 bytes @ 0x6
   342                           
   343  0076                     ?_LCDGoto:	
   344                           ; 1 bytes @ 0x6
   345                           
   346  0076                     LCDGoto@ln:	
   347                           ; 1 bytes @ 0x6
   348                           
   349                           
   350                           ; 1 bytes @ 0x6
   351  0076                     	ds	1
   352  0077                     ??_LCDGoto:
   353  0077                     LCDPutStr@i:	
   354                           ; 1 bytes @ 0x7
   355                           
   356                           
   357                           ; 1 bytes @ 0x7
   358  0077                     	ds	1
   359  0078                     LCDPutStr@str:
   360                           
   361                           ; 1 bytes @ 0x8
   362  0078                     	ds	1
   363  0079                     _LCDGoto$124:
   364                           
   365                           ; 2 bytes @ 0x9
   366  0079                     	ds	2
   367  007B                     LCDGoto@pos:
   368                           
   369                           ; 1 bytes @ 0xB
   370  007B                     	ds	1
   371                           
   372                           	psect	cstackBANK0
   373  0020                     __pcstackBANK0:
   374  0020                     ??_main:
   375                           
   376                           ; 1 bytes @ 0x0
   377  0020                     	ds	3
   378                           
   379                           	psect	maintext
   380  078E                     __pmaintext:	
   381 ;;
   382 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   383 ;;
   384 ;; *************** function _main *****************
   385 ;; Defined at:
   386 ;;		line 228 in file "LED_Main.c"
   387 ;; Parameters:    Size  Location     Type
   388 ;;		None
   389 ;; Auto vars:     Size  Location     Type
   390 ;;		None
   391 ;; Return value:  Size  Location     Type
   392 ;;                  1    wreg      void 
   393 ;; Registers used:
   394 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   395 ;; Tracked objects:
   396 ;;		On entry : B00/0
   397 ;;		On exit  : 0/0
   398 ;;		Unchanged: 0/0
   399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   400 ;;      Params:         0       0       0       0
   401 ;;      Locals:         0       0       0       0
   402 ;;      Temps:          0       3       0       0
   403 ;;      Totals:         0       3       0       0
   404 ;;Total ram usage:        3 bytes
   405 ;; Hardware stack levels required when called: 4
   406 ;; This function calls:
   407 ;;		_ADC_Initialize
   408 ;;		_LCDGoto
   409 ;;		_LCDPutCmd
   410 ;;		_LCDPutStr
   411 ;;		_LCD_Initialize
   412 ;; This function is called by:
   413 ;;		Startup code after reset
   414 ;; This function uses a non-reentrant model
   415 ;;
   416                           
   417  078E                     _main:	
   418                           ;psect for function _main
   419                           
   420  078E                     l918:	
   421                           ;incstack = 0
   422                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   423                           
   424                           
   425                           ;LED_Main.c: 230: ADC_Initialize();
   426  078E  118A  26DB  118A   	fcall	_ADC_Initialize
   427                           
   428                           ;LED_Main.c: 233: LCD_Initialize();
   429  0791  118A  2737  118A   	fcall	_LCD_Initialize
   430  0794                     l920:
   431                           
   432                           ;LED_Main.c: 237:   {;LED_Main.c: 240:     RC4 = 1;
   433  0794  1283               	bcf	3,5	;RP0=0, select bank0
   434  0795  1303               	bcf	3,6	;RP1=0, select bank0
   435  0796  1607               	bsf	7,4	;volatile
   436  0797                     l922:
   437                           
   438                           ;LED_Main.c: 241:     LCDPutStr(" Hello Graham!");
   439  0797  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   440  0798  118A  271B  118A   	fcall	_LCDPutStr
   441  079B                     l924:
   442                           
   443                           ;LED_Main.c: 242:     LCDGoto(0,1);
   444  079B  01F6               	clrf	LCDGoto@ln
   445  079C  0AF6               	incf	LCDGoto@ln,f
   446  079D  3000               	movlw	0
   447  079E  118A  2762  118A   	fcall	_LCDGoto
   448                           
   449                           ;LED_Main.c: 243:     LCDPutStr("It works");
   450  07A1  3010               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   451  07A2  118A  271B  118A   	fcall	_LCDPutStr
   452  07A5                     l926:
   453                           
   454                           ;LED_Main.c: 244:     _delay((unsigned long)((2000)*(4194304/4000.0)));
   455  07A5  300B               	movlw	11
   456  07A6  1283               	bcf	3,5	;RP0=0, select bank0
   457  07A7  1303               	bcf	3,6	;RP1=0, select bank0
   458  07A8  00A2               	movwf	??_main+2
   459  07A9  30A4               	movlw	164
   460  07AA  00A1               	movwf	??_main+1
   461  07AB  3089               	movlw	137
   462  07AC  00A0               	movwf	??_main
   463  07AD                     u277:
   464  07AD  0BA0               	decfsz	??_main,f
   465  07AE  2FAD               	goto	u277
   466  07AF  0BA1               	decfsz	??_main+1,f
   467  07B0  2FAD               	goto	u277
   468  07B1  0BA2               	decfsz	??_main+2,f
   469  07B2  2FAD               	goto	u277
   470  07B3  0000               	nop
   471  07B4                     l928:
   472                           
   473                           ;LED_Main.c: 245:     LCDPutCmd(0x01);
   474  07B4  3001               	movlw	1
   475  07B5  118A  26E7  118A   	fcall	_LCDPutCmd
   476  07B8  2F94               	goto	l920
   477  07B9  118A  2800         	ljmp	start
   478  07BB                     __end_of_main:
   479                           
   480                           	psect	text1
   481  0737                     __ptext1:	
   482 ;; *************** function _LCD_Initialize *****************
   483 ;; Defined at:
   484 ;;		line 61 in file "LED_Main.c"
   485 ;; Parameters:    Size  Location     Type
   486 ;;		None
   487 ;; Auto vars:     Size  Location     Type
   488 ;;		None
   489 ;; Return value:  Size  Location     Type
   490 ;;                  1    wreg      void 
   491 ;; Registers used:
   492 ;;		wreg, status,2, status,0, pclath, cstack
   493 ;; Tracked objects:
   494 ;;		On entry : 0/0
   495 ;;		On exit  : 0/0
   496 ;;		Unchanged: 0/0
   497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   498 ;;      Params:         0       0       0       0
   499 ;;      Locals:         0       0       0       0
   500 ;;      Temps:          2       0       0       0
   501 ;;      Totals:         2       0       0       0
   502 ;;Total ram usage:        2 bytes
   503 ;; Hardware stack levels used: 1
   504 ;; Hardware stack levels required when called: 3
   505 ;; This function calls:
   506 ;;		_LCDPutCmd
   507 ;; This function is called by:
   508 ;;		_main
   509 ;; This function uses a non-reentrant model
   510 ;;
   511                           
   512  0737                     _LCD_Initialize:	
   513                           ;psect for function _LCD_Initialize
   514                           
   515  0737                     l874:	
   516                           ;incstack = 0
   517                           ; Regs used in _LCD_Initialize: [wreg+status,2+status,0+pclath+cstack]
   518                           
   519                           
   520                           ;LED_Main.c: 64: PORTB = 0;
   521  0737  1283               	bcf	3,5	;RP0=0, select bank0
   522  0738  1303               	bcf	3,6	;RP1=0, select bank0
   523  0739  0186               	clrf	6	;volatile
   524  073A                     l876:
   525                           
   526                           ;LED_Main.c: 65: PORTC = 0b00010000;
   527  073A  3010               	movlw	16
   528  073B  0087               	movwf	7	;volatile
   529  073C                     l878:
   530                           
   531                           ;LED_Main.c: 66: TRISB = 0x00;
   532  073C  1683               	bsf	3,5	;RP0=1, select bank1
   533  073D  1303               	bcf	3,6	;RP1=0, select bank1
   534  073E  0186               	clrf	6	;volatile
   535  073F                     l880:
   536                           
   537                           ;LED_Main.c: 67: TRISC = 0x00;
   538  073F  0187               	clrf	7	;volatile
   539  0740                     l882:
   540                           
   541                           ;LED_Main.c: 70: _delay((unsigned long)((15)*(4194304/4000.0)));
   542  0740  3015               	movlw	21
   543  0741  00F7               	movwf	??_LCD_Initialize+1
   544  0742  306B               	movlw	107
   545  0743  00F6               	movwf	??_LCD_Initialize
   546  0744                     u287:
   547  0744  0BF6               	decfsz	??_LCD_Initialize,f
   548  0745  2F44               	goto	u287
   549  0746  0BF7               	decfsz	??_LCD_Initialize+1,f
   550  0747  2F44               	goto	u287
   551  0748  2F49               	nop2
   552  0749                     l884:
   553                           
   554                           ;LED_Main.c: 71: LCDPutCmd(0x02);
   555  0749  3002               	movlw	2
   556  074A  118A  26E7  118A   	fcall	_LCDPutCmd
   557  074D                     l886:
   558                           
   559                           ;LED_Main.c: 73: LCDPutCmd(0x28);
   560  074D  3028               	movlw	40
   561  074E  118A  26E7  118A   	fcall	_LCDPutCmd
   562  0751                     l888:
   563                           
   564                           ;LED_Main.c: 75: LCDPutCmd(0x0C);
   565  0751  300C               	movlw	12
   566  0752  118A  26E7  118A   	fcall	_LCDPutCmd
   567  0755                     l890:
   568                           
   569                           ;LED_Main.c: 77: LCDPutCmd(0x06);
   570  0755  3006               	movlw	6
   571  0756  118A  26E7  118A   	fcall	_LCDPutCmd
   572  0759                     l892:
   573                           
   574                           ;LED_Main.c: 79: LCDPutCmd(0x01);
   575  0759  3001               	movlw	1
   576  075A  118A  26E7  118A   	fcall	_LCDPutCmd
   577  075D                     l894:
   578                           
   579                           ;LED_Main.c: 81: LCDPutCmd(0x80);
   580  075D  3080               	movlw	128
   581  075E  118A  26E7  118A   	fcall	_LCDPutCmd
   582  0761                     l41:
   583  0761  0008               	return
   584  0762                     __end_of_LCD_Initialize:
   585                           
   586                           	psect	text2
   587  071B                     __ptext2:	
   588 ;; *************** function _LCDPutStr *****************
   589 ;; Defined at:
   590 ;;		line 170 in file "LED_Main.c"
   591 ;; Parameters:    Size  Location     Type
   592 ;;  str             1    wreg     PTR const unsigned char 
   593 ;;		 -> STR_2(9), STR_1(15), 
   594 ;; Auto vars:     Size  Location     Type
   595 ;;  str             1    8[COMMON] PTR const unsigned char 
   596 ;;		 -> STR_2(9), STR_1(15), 
   597 ;;  i               1    7[COMMON] unsigned char 
   598 ;; Return value:  Size  Location     Type
   599 ;;                  1    wreg      void 
   600 ;; Registers used:
   601 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   602 ;; Tracked objects:
   603 ;;		On entry : 0/0
   604 ;;		On exit  : 0/0
   605 ;;		Unchanged: 0/0
   606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   607 ;;      Params:         0       0       0       0
   608 ;;      Locals:         2       0       0       0
   609 ;;      Temps:          1       0       0       0
   610 ;;      Totals:         3       0       0       0
   611 ;;Total ram usage:        3 bytes
   612 ;; Hardware stack levels used: 1
   613 ;; Hardware stack levels required when called: 3
   614 ;; This function calls:
   615 ;;		_LCDPutChar
   616 ;; This function is called by:
   617 ;;		_main
   618 ;; This function uses a non-reentrant model
   619 ;;
   620                           
   621  071B                     _LCDPutStr:	
   622                           ;psect for function _LCDPutStr
   623                           
   624                           
   625                           ;incstack = 0
   626                           ; Regs used in _LCDPutStr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   627                           ;LCDPutStr@str stored from wreg
   628  071B  00F8               	movwf	LCDPutStr@str
   629  071C                     l896:
   630                           
   631                           ;LED_Main.c: 170: void LCDPutStr(const char *str);LED_Main.c: 171: {;LED_Main.c: 172: ch
      +                          ar i=0;
   632  071C  01F7               	clrf	LCDPutStr@i
   633                           
   634                           ;LED_Main.c: 175: while (str[i])
   635  071D  2F2B               	goto	l902
   636  071E                     l898:
   637                           
   638                           ;LED_Main.c: 176: {;LED_Main.c: 178: LCDPutChar(str[i++]);
   639  071E  0877               	movf	LCDPutStr@i,w
   640  071F  0778               	addwf	LCDPutStr@str,w
   641  0720  0084               	movwf	4
   642  0721  118A  2002  118A   	fcall	stringdir
   643  0724  118A  26F7  118A   	fcall	_LCDPutChar
   644  0727                     l900:
   645  0727  3001               	movlw	1
   646  0728  00F6               	movwf	??_LCDPutStr
   647  0729  0876               	movf	??_LCDPutStr,w
   648  072A  07F7               	addwf	LCDPutStr@i,f
   649  072B                     l902:
   650                           
   651                           ;LED_Main.c: 175: while (str[i])
   652  072B  0877               	movf	LCDPutStr@i,w
   653  072C  0778               	addwf	LCDPutStr@str,w
   654  072D  0084               	movwf	4
   655  072E  118A  2002  118A   	fcall	stringdir
   656  0731  3A00               	xorlw	0
   657  0732  1D03               	skipz
   658  0733  2F35               	goto	u231
   659  0734  2F36               	goto	u230
   660  0735                     u231:
   661  0735  2F1E               	goto	l898
   662  0736                     u230:
   663  0736                     l67:
   664  0736  0008               	return
   665  0737                     __end_of_LCDPutStr:
   666                           
   667                           	psect	text3
   668  06F7                     __ptext3:	
   669 ;; *************** function _LCDPutChar *****************
   670 ;; Defined at:
   671 ;;		line 144 in file "LED_Main.c"
   672 ;; Parameters:    Size  Location     Type
   673 ;;  ch              1    wreg     unsigned char 
   674 ;; Auto vars:     Size  Location     Type
   675 ;;  ch              1    5[COMMON] unsigned char 
   676 ;; Return value:  Size  Location     Type
   677 ;;                  1    wreg      void 
   678 ;; Registers used:
   679 ;;		wreg, status,2, status,0, pclath, cstack
   680 ;; Tracked objects:
   681 ;;		On entry : 0/0
   682 ;;		On exit  : 0/0
   683 ;;		Unchanged: 0/0
   684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   685 ;;      Params:         0       0       0       0
   686 ;;      Locals:         1       0       0       0
   687 ;;      Temps:          2       0       0       0
   688 ;;      Totals:         3       0       0       0
   689 ;;Total ram usage:        3 bytes
   690 ;; Hardware stack levels used: 1
   691 ;; Hardware stack levels required when called: 2
   692 ;; This function calls:
   693 ;;		_LCDWriteNibble
   694 ;; This function is called by:
   695 ;;		_LCDPutStr
   696 ;; This function uses a non-reentrant model
   697 ;;
   698                           
   699  06F7                     _LCDPutChar:	
   700                           ;psect for function _LCDPutChar
   701                           
   702                           
   703                           ;incstack = 0
   704                           ; Regs used in _LCDPutChar: [wreg+status,2+status,0+pclath+cstack]
   705                           ;LCDPutChar@ch stored from wreg
   706  06F7  00F5               	movwf	LCDPutChar@ch
   707  06F8                     l870:
   708                           
   709                           ;LED_Main.c: 144: void LCDPutChar(char ch);LED_Main.c: 145: {;LED_Main.c: 146: _delay((u
      +                          nsigned long)((5)*(4194304/4000.0)));
   710  06F8  3007               	movlw	7
   711  06F9  00F4               	movwf	??_LCDPutChar+1
   712  06FA  30CD               	movlw	205
   713  06FB  00F3               	movwf	??_LCDPutChar
   714  06FC                     u297:
   715  06FC  0BF3               	decfsz	??_LCDPutChar,f
   716  06FD  2EFC               	goto	u297
   717  06FE  0BF4               	decfsz	??_LCDPutChar+1,f
   718  06FF  2EFC               	goto	u297
   719  0700  2F01               	nop2
   720  0701                     l872:
   721                           
   722                           ;LED_Main.c: 149: LCDWriteNibble(ch,1);
   723  0701  01F1               	clrf	LCDWriteNibble@rs
   724  0702  0AF1               	incf	LCDWriteNibble@rs,f
   725  0703  0875               	movf	LCDPutChar@ch,w
   726  0704  118A  27BB  118A   	fcall	_LCDWriteNibble
   727  0707                     l58:
   728  0707  0008               	return
   729  0708                     __end_of_LCDPutChar:
   730                           
   731                           	psect	text4
   732  0762                     __ptext4:	
   733 ;; *************** function _LCDGoto *****************
   734 ;; Defined at:
   735 ;;		line 183 in file "LED_Main.c"
   736 ;; Parameters:    Size  Location     Type
   737 ;;  pos             1    wreg     unsigned char 
   738 ;;  ln              1    6[COMMON] unsigned char 
   739 ;; Auto vars:     Size  Location     Type
   740 ;;  pos             1   11[COMMON] unsigned char 
   741 ;; Return value:  Size  Location     Type
   742 ;;                  1    wreg      void 
   743 ;; Registers used:
   744 ;;		wreg, status,2, status,0, pclath, cstack
   745 ;; Tracked objects:
   746 ;;		On entry : 0/0
   747 ;;		On exit  : 0/0
   748 ;;		Unchanged: 0/0
   749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   750 ;;      Params:         1       0       0       0
   751 ;;      Locals:         3       0       0       0
   752 ;;      Temps:          2       0       0       0
   753 ;;      Totals:         6       0       0       0
   754 ;;Total ram usage:        6 bytes
   755 ;; Hardware stack levels used: 1
   756 ;; Hardware stack levels required when called: 3
   757 ;; This function calls:
   758 ;;		_LCDPutCmd
   759 ;; This function is called by:
   760 ;;		_main
   761 ;; This function uses a non-reentrant model
   762 ;;
   763                           
   764  0762                     _LCDGoto:	
   765                           ;psect for function _LCDGoto
   766                           
   767                           
   768                           ;incstack = 0
   769                           ; Regs used in _LCDGoto: [wreg+status,2+status,0+pclath+cstack]
   770                           ;LCDGoto@pos stored from wreg
   771  0762  00FB               	movwf	LCDGoto@pos
   772  0763                     l904:
   773                           
   774                           ;LED_Main.c: 183: void LCDGoto(char pos,char ln);LED_Main.c: 184: {;LED_Main.c: 186: if 
      +                          ((ln > (2 -1)) || (pos > (16 -1)))
   775  0763  3002               	movlw	2
   776  0764  0276               	subwf	LCDGoto@ln,w
   777  0765  1803               	skipnc
   778  0766  2F68               	goto	u241
   779  0767  2F69               	goto	u240
   780  0768                     u241:
   781  0768  2F8D               	goto	l73
   782  0769                     u240:
   783  0769                     l906:
   784  0769  3010               	movlw	16
   785  076A  027B               	subwf	LCDGoto@pos,w
   786  076B  1C03               	skipc
   787  076C  2F6E               	goto	u251
   788  076D  2F6F               	goto	u250
   789  076E                     u251:
   790  076E  2F70               	goto	l908
   791  076F                     u250:
   792  076F  2F8D               	goto	l73
   793  0770                     l908:
   794                           
   795                           ;LED_Main.c: 193: LCDPutCmd((ln == 1) ? (0xC0 | pos) : (0x80 | pos));
   796  0770  0376               	decf	LCDGoto@ln,w
   797  0771  1903               	btfsc	3,2
   798  0772  2F74               	goto	u261
   799  0773  2F75               	goto	u260
   800  0774                     u261:
   801  0774  2F7B               	goto	l912
   802  0775                     u260:
   803  0775                     l910:
   804  0775  3080               	movlw	128
   805  0776  047B               	iorwf	LCDGoto@pos,w
   806  0777  00F9               	movwf	_LCDGoto$124
   807  0778  3000               	movlw	0
   808  0779  00FA               	movwf	_LCDGoto$124+1
   809  077A  2F80               	goto	l914
   810  077B                     l912:
   811  077B  30C0               	movlw	192
   812  077C  047B               	iorwf	LCDGoto@pos,w
   813  077D  00F9               	movwf	_LCDGoto$124
   814  077E  3000               	movlw	0
   815  077F  00FA               	movwf	_LCDGoto$124+1
   816  0780                     l914:
   817  0780  0879               	movf	_LCDGoto$124,w
   818  0781  118A  26E7  118A   	fcall	_LCDPutCmd
   819  0784                     l916:
   820                           
   821                           ;LED_Main.c: 196: _delay((unsigned long)((5)*(4194304/4000.0)));
   822  0784  3007               	movlw	7
   823  0785  00F8               	movwf	??_LCDGoto+1
   824  0786  30CD               	movlw	205
   825  0787  00F7               	movwf	??_LCDGoto
   826  0788                     u307:
   827  0788  0BF7               	decfsz	??_LCDGoto,f
   828  0789  2F88               	goto	u307
   829  078A  0BF8               	decfsz	??_LCDGoto+1,f
   830  078B  2F88               	goto	u307
   831  078C  2F8D               	nop2
   832  078D                     l73:
   833  078D  0008               	return
   834  078E                     __end_of_LCDGoto:
   835                           
   836                           	psect	text5
   837  06E7                     __ptext5:	
   838 ;; *************** function _LCDPutCmd *****************
   839 ;; Defined at:
   840 ;;		line 155 in file "LED_Main.c"
   841 ;; Parameters:    Size  Location     Type
   842 ;;  ch              1    wreg     unsigned char 
   843 ;; Auto vars:     Size  Location     Type
   844 ;;  ch              1    5[COMMON] unsigned char 
   845 ;; Return value:  Size  Location     Type
   846 ;;                  1    wreg      void 
   847 ;; Registers used:
   848 ;;		wreg, status,2, status,0, pclath, cstack
   849 ;; Tracked objects:
   850 ;;		On entry : 0/0
   851 ;;		On exit  : 0/0
   852 ;;		Unchanged: 0/0
   853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   854 ;;      Params:         0       0       0       0
   855 ;;      Locals:         1       0       0       0
   856 ;;      Temps:          2       0       0       0
   857 ;;      Totals:         3       0       0       0
   858 ;;Total ram usage:        3 bytes
   859 ;; Hardware stack levels used: 1
   860 ;; Hardware stack levels required when called: 2
   861 ;; This function calls:
   862 ;;		_LCDWriteNibble
   863 ;; This function is called by:
   864 ;;		_LCD_Initialize
   865 ;;		_LCDGoto
   866 ;;		_main
   867 ;; This function uses a non-reentrant model
   868 ;;
   869                           
   870  06E7                     _LCDPutCmd:	
   871                           ;psect for function _LCDPutCmd
   872                           
   873                           
   874                           ;incstack = 0
   875                           ; Regs used in _LCDPutCmd: [wreg+status,2+status,0+pclath+cstack]
   876                           ;LCDPutCmd@ch stored from wreg
   877  06E7  00F5               	movwf	LCDPutCmd@ch
   878  06E8                     l866:
   879                           
   880                           ;LED_Main.c: 155: void LCDPutCmd(char ch);LED_Main.c: 156: {;LED_Main.c: 157: _delay((un
      +                          signed long)((5)*(4194304/4000.0)));
   881  06E8  3007               	movlw	7
   882  06E9  00F4               	movwf	??_LCDPutCmd+1
   883  06EA  30CD               	movlw	205
   884  06EB  00F3               	movwf	??_LCDPutCmd
   885  06EC                     u317:
   886  06EC  0BF3               	decfsz	??_LCDPutCmd,f
   887  06ED  2EEC               	goto	u317
   888  06EE  0BF4               	decfsz	??_LCDPutCmd+1,f
   889  06EF  2EEC               	goto	u317
   890  06F0  2EF1               	nop2
   891  06F1                     l868:
   892                           
   893                           ;LED_Main.c: 160: LCDWriteNibble(ch,0);
   894  06F1  01F1               	clrf	LCDWriteNibble@rs
   895  06F2  0875               	movf	LCDPutCmd@ch,w
   896  06F3  118A  27BB  118A   	fcall	_LCDWriteNibble
   897  06F6                     l61:
   898  06F6  0008               	return
   899  06F7                     __end_of_LCDPutCmd:
   900                           
   901                           	psect	text6
   902  07BB                     __ptext6:	
   903 ;; *************** function _LCDWriteNibble *****************
   904 ;; Defined at:
   905 ;;		line 94 in file "LED_Main.c"
   906 ;; Parameters:    Size  Location     Type
   907 ;;  ch              1    wreg     unsigned char 
   908 ;;  rs              1    1[COMMON] unsigned char 
   909 ;; Auto vars:     Size  Location     Type
   910 ;;  ch              1    2[COMMON] unsigned char 
   911 ;; Return value:  Size  Location     Type
   912 ;;                  1    wreg      void 
   913 ;; Registers used:
   914 ;;		wreg, status,2, status,0, pclath, cstack
   915 ;; Tracked objects:
   916 ;;		On entry : 0/0
   917 ;;		On exit  : 0/0
   918 ;;		Unchanged: 0/0
   919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   920 ;;      Params:         1       0       0       0
   921 ;;      Locals:         1       0       0       0
   922 ;;      Temps:          0       0       0       0
   923 ;;      Totals:         2       0       0       0
   924 ;;Total ram usage:        2 bytes
   925 ;; Hardware stack levels used: 1
   926 ;; Hardware stack levels required when called: 1
   927 ;; This function calls:
   928 ;;		_ToggleEnable
   929 ;; This function is called by:
   930 ;;		_LCDPutChar
   931 ;;		_LCDPutCmd
   932 ;; This function uses a non-reentrant model
   933 ;;
   934                           
   935  07BB                     _LCDWriteNibble:	
   936                           ;psect for function _LCDWriteNibble
   937                           
   938                           
   939                           ;incstack = 0
   940                           ; Regs used in _LCDWriteNibble: [wreg+status,2+status,0+pclath+cstack]
   941                           ;LCDWriteNibble@ch stored from wreg
   942  07BB  00F2               	movwf	LCDWriteNibble@ch
   943  07BC                     l822:
   944                           
   945                           ;LED_Main.c: 94: void LCDWriteNibble(char ch, char rs);LED_Main.c: 95: {;LED_Main.c: 97:
      +                           PORTBbits.RB6 = rs;
   946  07BC  0C71               	rrf	LCDWriteNibble@rs,w
   947  07BD  1283               	bcf	3,5	;RP0=0, select bank0
   948  07BE  1303               	bcf	3,6	;RP1=0, select bank0
   949  07BF  1C03               	skipc
   950  07C0  1306               	bcf	6,6	;volatile
   951  07C1  1803               	skipnc
   952  07C2  1706               	bsf	6,6	;volatile
   953  07C3                     l824:
   954                           
   955                           ;LED_Main.c: 100: PORTBbits.RB7 = 0;
   956  07C3  1386               	bcf	6,7	;volatile
   957  07C4                     l826:
   958                           
   959                           ;LED_Main.c: 104: RB0 = 0x00;
   960  07C4  1006               	bcf	6,0	;volatile
   961  07C5                     l828:
   962                           
   963                           ;LED_Main.c: 105: RB1 = 0x00;
   964  07C5  1086               	bcf	6,1	;volatile
   965  07C6                     l830:
   966                           
   967                           ;LED_Main.c: 106: RB2 = 0x00;
   968  07C6  1106               	bcf	6,2	;volatile
   969  07C7                     l832:
   970                           
   971                           ;LED_Main.c: 107: RB3 = 0x00;
   972  07C7  1186               	bcf	6,3	;volatile
   973  07C8                     l834:
   974                           
   975                           ;LED_Main.c: 109:     if ((ch&0x10) == 0x10)
   976  07C8  1E72               	btfss	LCDWriteNibble@ch,4
   977  07C9  2FCB               	goto	u151
   978  07CA  2FCC               	goto	u150
   979  07CB                     u151:
   980  07CB  2FCD               	goto	l47
   981  07CC                     u150:
   982  07CC                     l836:
   983                           
   984                           ;LED_Main.c: 110:             RB0 = 1;
   985  07CC  1406               	bsf	6,0	;volatile
   986  07CD                     l47:
   987                           
   988                           ;LED_Main.c: 111:     if ((ch&0x20) == 0x20)
   989  07CD  1EF2               	btfss	LCDWriteNibble@ch,5
   990  07CE  2FD0               	goto	u161
   991  07CF  2FD1               	goto	u160
   992  07D0                     u161:
   993  07D0  2FD2               	goto	l48
   994  07D1                     u160:
   995  07D1                     l838:
   996                           
   997                           ;LED_Main.c: 112:             RB1 = 1;
   998  07D1  1486               	bsf	6,1	;volatile
   999  07D2                     l48:
  1000                           
  1001                           ;LED_Main.c: 113:     if ((ch&0x40) == 0x40)
  1002  07D2  1F72               	btfss	LCDWriteNibble@ch,6
  1003  07D3  2FD5               	goto	u171
  1004  07D4  2FD6               	goto	u170
  1005  07D5                     u171:
  1006  07D5  2FD7               	goto	l49
  1007  07D6                     u170:
  1008  07D6                     l840:
  1009                           
  1010                           ;LED_Main.c: 114:             RB2 = 1;
  1011  07D6  1506               	bsf	6,2	;volatile
  1012  07D7                     l49:
  1013                           
  1014                           ;LED_Main.c: 115:     if ((ch&0x80) == 0x80)
  1015  07D7  1FF2               	btfss	LCDWriteNibble@ch,7
  1016  07D8  2FDA               	goto	u181
  1017  07D9  2FDB               	goto	u180
  1018  07DA                     u181:
  1019  07DA  2FDC               	goto	l844
  1020  07DB                     u180:
  1021  07DB                     l842:
  1022                           
  1023                           ;LED_Main.c: 116:             RB3 = 1;
  1024  07DB  1586               	bsf	6,3	;volatile
  1025  07DC                     l844:
  1026                           
  1027                           ;LED_Main.c: 118: ToggleEnable();
  1028  07DC  118A  2708  118A   	fcall	_ToggleEnable
  1029  07DF                     l846:
  1030                           
  1031                           ;LED_Main.c: 122: RB0 = 0x00;
  1032  07DF  1283               	bcf	3,5	;RP0=0, select bank0
  1033  07E0  1303               	bcf	3,6	;RP1=0, select bank0
  1034  07E1  1006               	bcf	6,0	;volatile
  1035  07E2                     l848:
  1036                           
  1037                           ;LED_Main.c: 123: RB1 = 0x00;
  1038  07E2  1086               	bcf	6,1	;volatile
  1039  07E3                     l850:
  1040                           
  1041                           ;LED_Main.c: 124: RB2 = 0x00;
  1042  07E3  1106               	bcf	6,2	;volatile
  1043  07E4                     l852:
  1044                           
  1045                           ;LED_Main.c: 125: RB3 = 0x00;
  1046  07E4  1186               	bcf	6,3	;volatile
  1047  07E5                     l854:
  1048                           
  1049                           ;LED_Main.c: 127:     if ((ch&0x01) == 0x01)
  1050  07E5  1C72               	btfss	LCDWriteNibble@ch,0
  1051  07E6  2FE8               	goto	u191
  1052  07E7  2FE9               	goto	u190
  1053  07E8                     u191:
  1054  07E8  2FEA               	goto	l51
  1055  07E9                     u190:
  1056  07E9                     l856:
  1057                           
  1058                           ;LED_Main.c: 128:             RB0 = 1;
  1059  07E9  1406               	bsf	6,0	;volatile
  1060  07EA                     l51:
  1061                           
  1062                           ;LED_Main.c: 129:     if ((ch&0x02) == 0x02)
  1063  07EA  1CF2               	btfss	LCDWriteNibble@ch,1
  1064  07EB  2FED               	goto	u201
  1065  07EC  2FEE               	goto	u200
  1066  07ED                     u201:
  1067  07ED  2FEF               	goto	l52
  1068  07EE                     u200:
  1069  07EE                     l858:
  1070                           
  1071                           ;LED_Main.c: 130:             RB1 = 1;
  1072  07EE  1486               	bsf	6,1	;volatile
  1073  07EF                     l52:
  1074                           
  1075                           ;LED_Main.c: 131:     if ((ch&0x04) == 0x04)
  1076  07EF  1D72               	btfss	LCDWriteNibble@ch,2
  1077  07F0  2FF2               	goto	u211
  1078  07F1  2FF3               	goto	u210
  1079  07F2                     u211:
  1080  07F2  2FF4               	goto	l53
  1081  07F3                     u210:
  1082  07F3                     l860:
  1083                           
  1084                           ;LED_Main.c: 132:             RB2 = 1;
  1085  07F3  1506               	bsf	6,2	;volatile
  1086  07F4                     l53:
  1087                           
  1088                           ;LED_Main.c: 133:     if ((ch&0x08) == 0x08)
  1089  07F4  1DF2               	btfss	LCDWriteNibble@ch,3
  1090  07F5  2FF7               	goto	u221
  1091  07F6  2FF8               	goto	u220
  1092  07F7                     u221:
  1093  07F7  2FF9               	goto	l864
  1094  07F8                     u220:
  1095  07F8                     l862:
  1096                           
  1097                           ;LED_Main.c: 134:             RB3 = 1;
  1098  07F8  1586               	bsf	6,3	;volatile
  1099  07F9                     l864:
  1100                           
  1101                           ;LED_Main.c: 136:  ToggleEnable();
  1102  07F9  118A  2708  118A   	fcall	_ToggleEnable
  1103  07FC                     l55:
  1104  07FC  0008               	return
  1105  07FD                     __end_of_LCDWriteNibble:
  1106                           
  1107                           	psect	text7
  1108  0708                     __ptext7:	
  1109 ;; *************** function _ToggleEnable *****************
  1110 ;; Defined at:
  1111 ;;		line 84 in file "LED_Main.c"
  1112 ;; Parameters:    Size  Location     Type
  1113 ;;		None
  1114 ;; Auto vars:     Size  Location     Type
  1115 ;;		None
  1116 ;; Return value:  Size  Location     Type
  1117 ;;                  1    wreg      void 
  1118 ;; Registers used:
  1119 ;;		wreg
  1120 ;; Tracked objects:
  1121 ;;		On entry : 0/0
  1122 ;;		On exit  : 0/0
  1123 ;;		Unchanged: 0/0
  1124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1125 ;;      Params:         0       0       0       0
  1126 ;;      Locals:         0       0       0       0
  1127 ;;      Temps:          1       0       0       0
  1128 ;;      Totals:         1       0       0       0
  1129 ;;Total ram usage:        1 bytes
  1130 ;; Hardware stack levels used: 1
  1131 ;; This function calls:
  1132 ;;		Nothing
  1133 ;; This function is called by:
  1134 ;;		_LCDWriteNibble
  1135 ;; This function uses a non-reentrant model
  1136 ;;
  1137                           
  1138  0708                     _ToggleEnable:	
  1139                           ;psect for function _ToggleEnable
  1140                           
  1141  0708                     l816:	
  1142                           ;incstack = 0
  1143                           ; Regs used in _ToggleEnable: [wreg]
  1144                           
  1145                           
  1146                           ;LED_Main.c: 86: _delay((unsigned long)((10)*(4194304/4000000.0)));
  1147  0708  3003               	movlw	3
  1148  0709  00F0               	movwf	??_ToggleEnable
  1149  070A                     u327:
  1150  070A  0BF0               	decfsz	??_ToggleEnable,f
  1151  070B  2F0A               	goto	u327
  1152  070C                     l818:
  1153                           
  1154                           ;LED_Main.c: 87: PORTCbits.RC5 = 1;
  1155  070C  1283               	bcf	3,5	;RP0=0, select bank0
  1156  070D  1303               	bcf	3,6	;RP1=0, select bank0
  1157  070E  1687               	bsf	7,5	;volatile
  1158                           
  1159                           ;LED_Main.c: 88: _delay((unsigned long)((10)*(4194304/4000000.0)));
  1160  070F  3003               	movlw	3
  1161  0710  00F0               	movwf	??_ToggleEnable
  1162  0711                     u337:
  1163  0711  0BF0               	decfsz	??_ToggleEnable,f
  1164  0712  2F11               	goto	u337
  1165  0713                     l820:
  1166                           
  1167                           ;LED_Main.c: 89: PORTCbits.RC5 = 0;
  1168  0713  1283               	bcf	3,5	;RP0=0, select bank0
  1169  0714  1303               	bcf	3,6	;RP1=0, select bank0
  1170  0715  1287               	bcf	7,5	;volatile
  1171                           
  1172                           ;LED_Main.c: 90: _delay((unsigned long)((10)*(4194304/4000000.0)));
  1173  0716  3003               	movlw	3
  1174  0717  00F0               	movwf	??_ToggleEnable
  1175  0718                     u347:
  1176  0718  0BF0               	decfsz	??_ToggleEnable,f
  1177  0719  2F18               	goto	u347
  1178  071A                     l44:
  1179  071A  0008               	return
  1180  071B                     __end_of_ToggleEnable:
  1181                           
  1182                           	psect	text8
  1183  06DB                     __ptext8:	
  1184 ;; *************** function _ADC_Initialize *****************
  1185 ;; Defined at:
  1186 ;;		line 201 in file "LED_Main.c"
  1187 ;; Parameters:    Size  Location     Type
  1188 ;;		None
  1189 ;; Auto vars:     Size  Location     Type
  1190 ;;		None
  1191 ;; Return value:  Size  Location     Type
  1192 ;;                  1    wreg      void 
  1193 ;; Registers used:
  1194 ;;		wreg, status,2
  1195 ;; Tracked objects:
  1196 ;;		On entry : 0/0
  1197 ;;		On exit  : 0/0
  1198 ;;		Unchanged: 0/0
  1199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1200 ;;      Params:         0       0       0       0
  1201 ;;      Locals:         0       0       0       0
  1202 ;;      Temps:          0       0       0       0
  1203 ;;      Totals:         0       0       0       0
  1204 ;;Total ram usage:        0 bytes
  1205 ;; Hardware stack levels used: 1
  1206 ;; This function calls:
  1207 ;;		Nothing
  1208 ;; This function is called by:
  1209 ;;		_main
  1210 ;; This function uses a non-reentrant model
  1211 ;;
  1212                           
  1213  06DB                     _ADC_Initialize:	
  1214                           ;psect for function _ADC_Initialize
  1215                           
  1216  06DB                     l788:	
  1217                           ;incstack = 0
  1218                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  1219                           
  1220                           
  1221                           ;LED_Main.c: 203:   ANSELH = 0x00;
  1222  06DB  1683               	bsf	3,5	;RP0=1, select bank3
  1223  06DC  1703               	bsf	3,6	;RP1=1, select bank3
  1224  06DD  0189               	clrf	9	;volatile
  1225  06DE                     l790:
  1226                           
  1227                           ;LED_Main.c: 204:   ADCON0 = 0b01000001;
  1228  06DE  3041               	movlw	65
  1229  06DF  1283               	bcf	3,5	;RP0=0, select bank0
  1230  06E0  1303               	bcf	3,6	;RP1=0, select bank0
  1231  06E1  009F               	movwf	31	;volatile
  1232  06E2                     l792:
  1233                           
  1234                           ;LED_Main.c: 206:   ADCON1 = 0b11000000;
  1235  06E2  30C0               	movlw	192
  1236  06E3  1683               	bsf	3,5	;RP0=1, select bank1
  1237  06E4  1303               	bcf	3,6	;RP1=0, select bank1
  1238  06E5  009F               	movwf	31	;volatile
  1239  06E6                     l80:
  1240  06E6  0008               	return
  1241  06E7                     __end_of_ADC_Initialize:
  1242  007E                     btemp	set	126	;btemp
  1243  007E                     wtemp0	set	126
  1244                           
  1245                           	psect	idloc
  1246                           
  1247                           ;Config register IDLOC0 @ 0x2000
  1248                           ;	unspecified, using default values
  1249  2000                     	org	8192
  1250  2000  3FFF               	dw	16383
  1251                           
  1252                           ;Config register IDLOC1 @ 0x2001
  1253                           ;	unspecified, using default values
  1254  2001                     	org	8193
  1255  2001  3FFF               	dw	16383
  1256                           
  1257                           ;Config register IDLOC2 @ 0x2002
  1258                           ;	unspecified, using default values
  1259  2002                     	org	8194
  1260  2002  3FFF               	dw	16383
  1261                           
  1262                           ;Config register IDLOC3 @ 0x2003
  1263                           ;	unspecified, using default values
  1264  2003                     	org	8195
  1265  2003  3FFF               	dw	16383
  1266                           
  1267                           	psect	config
  1268                           
  1269                           ;Config register CONFIG1 @ 0x2007
  1270                           ;	Oscillator Selection bits
  1271                           ;	FOSC = XT, XT oscillator: Crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1/CLKIN
  1272                           ;	Watchdog Timer Enable bit
  1273                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  1274                           ;	Power-up Timer Enable bit
  1275                           ;	PWRTE = ON, PWRT enabled
  1276                           ;	RE3/MCLR pin function select bit
  1277                           ;	MCLRE = ON, RE3/MCLR pin function is MCLR
  1278                           ;	Code Protection bit
  1279                           ;	CP = OFF, Program memory code protection is disabled
  1280                           ;	Data Code Protection bit
  1281                           ;	CPD = OFF, Data memory code protection is disabled
  1282                           ;	Brown Out Reset Selection bits
  1283                           ;	BOREN = ON, BOR enabled
  1284                           ;	Internal External Switchover bit
  1285                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  1286                           ;	Fail-Safe Clock Monitor Enabled bit
  1287                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  1288                           ;	Low Voltage Programming Enable bit
  1289                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  1290                           ;	In-Circuit Debugger Mode bit
  1291                           ;	DEBUG = 0x1, unprogrammed default
  1292  2007                     	org	8199
  1293  2007  23E1               	dw	9185
  1294                           
  1295                           ;Config register CONFIG2 @ 0x2008
  1296                           ;	Brown-out Reset Selection bit
  1297                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  1298                           ;	Flash Program Memory Self Write Enable bits
  1299                           ;	WRT = OFF, Write protection off
  1300  2008                     	org	8200
  1301  2008  3FFF               	dw	16383

Data Sizes:
    Strings     24
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      12
    BANK0            80      3       3
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    LCDPutStr@str	PTR const unsigned char  size(1) Largest target is 15
		 -> STR_2(CODE[9]), STR_1(CODE[15]), 


Critical Paths under _main in COMMON

    _main->_LCDGoto
    _LCD_Initialize->_LCDPutCmd
    _LCDPutStr->_LCDPutChar
    _LCDPutChar->_LCDWriteNibble
    _LCDGoto->_LCDPutCmd
    _LCDPutCmd->_LCDWriteNibble
    _LCDWriteNibble->_ToggleEnable

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    1854
                                              0 BANK0      3     3      0
                     _ADC_Initialize
                            _LCDGoto
                          _LCDPutCmd
                          _LCDPutStr
                     _LCD_Initialize
 ---------------------------------------------------------------------------------
 (1) _LCD_Initialize                                       2     2      0     372
                                              6 COMMON     2     2      0
                          _LCDPutCmd
 ---------------------------------------------------------------------------------
 (1) _LCDPutStr                                            3     3      0     528
                                              6 COMMON     3     3      0
                         _LCDPutChar
 ---------------------------------------------------------------------------------
 (2) _LCDPutChar                                           3     3      0     372
                                              3 COMMON     3     3      0
                     _LCDWriteNibble
 ---------------------------------------------------------------------------------
 (1) _LCDGoto                                              6     5      1     582
                                              6 COMMON     6     5      1
                          _LCDPutCmd
 ---------------------------------------------------------------------------------
 (2) _LCDPutCmd                                            3     3      0     372
                                              3 COMMON     3     3      0
                     _LCDWriteNibble
 ---------------------------------------------------------------------------------
 (3) _LCDWriteNibble                                       2     1      1     350
                                              1 COMMON     2     1      1
                       _ToggleEnable
 ---------------------------------------------------------------------------------
 (4) _ToggleEnable                                         1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Initialize
   _LCDGoto
     _LCDPutCmd
       _LCDWriteNibble
         _ToggleEnable
   _LCDPutCmd
   _LCDPutStr
     _LCDPutChar
       _LCDWriteNibble
   _LCD_Initialize
     _LCDPutCmd

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      C       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50      3       3       3        3.8%
BITBANK1            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK1               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK2            50      0       0       6        0.0%
BANK2               50      0       0       7        0.0%
ABS                  0      0       0       8        0.0%
BITBANK0            50      0       0       9        0.0%
DATA                 0      0       0      10        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Sat May 28 11:04:05 2022

         _LCD_Initialize 0737                        pc 0002                       l41 0761  
                     l51 07EA              ?_LCDPutChar 0070                       l44 071A  
                     l52 07EF                       l53 07F4                       l61 06F6  
                     l55 07FC                       l47 07CD                       l80 06E6  
                     l48 07D2                       l49 07D7                       l73 078D  
                     l58 0707                       l67 0736                       fsr 0004  
                    l820 0713                      l900 0727                      l830 07C6  
                    l822 07BC                      l910 0775                      l902 072B  
                    l816 0708                      l840 07D6                      l832 07C7  
                    l824 07C3                      l912 077B                      l904 0763  
                    l920 0794                      l818 070C                      l850 07E3  
                    l842 07DB                      l834 07C8                      l826 07C4  
                    l914 0780                      l906 0769                      l922 0797  
                    l860 07F3                      l852 07E4                      l844 07DC  
                    l836 07CC                      l828 07C5                      l916 0784  
                    l908 0770                      l924 079B                      l790 06DE  
                    l862 07F8                      l854 07E5                      l846 07DF  
                    l838 07D1                      l870 06F8                      l926 07A5  
                    l918 078E                      l792 06E2                      l864 07F9  
                    l856 07E9                      l848 07E2                      l872 0701  
                    l880 073F                      l928 07B4                      l858 07EE  
                    l866 06E8                      l890 0755                      l882 0740  
                    l874 0737                      l788 06DB                      l868 06F1  
                    l892 0759                      l884 0749                      l876 073A  
                    l894 075D                      l886 074D                      l878 073C  
                    l896 071C                      l888 0751                      l898 071E  
                    _RB0 0030                      _RB1 0031                      _RB2 0032  
                    _RB3 0033                      _RC4 003C                      u200 07EE  
                    u201 07ED                      u210 07F3                      u211 07F2  
                    u220 07F8                      u221 07F7                      u150 07CC  
                    u230 0736                      u151 07CB                      u231 0735  
                    u160 07D1                      u240 0769                      u161 07D0  
                    u241 0768                      u170 07D6                      u250 076F  
                    u171 07D5                      u307 0788                      u251 076E  
                    u180 07DB                      u260 0775                      u181 07DA  
                    u317 06EC                      u261 0774                      u190 07E9  
                    u327 070A                      u191 07E8                      u337 0711  
                    u347 0718                      u277 07AD                      u287 0744  
                    u297 06FC                      fsr0 0004          __end_of_LCDGoto 078E  
                   STR_1 0008                     STR_2 0017                     _main 078E  
                   btemp 007E                     start 0000   __end_of_LCD_Initialize 0762  
            LCDPutCmd@ch 0075                    ?_main 0070                    _PORTB 0006  
                  _PORTC 0007                    _TRISB 0086                    _TRISC 0087  
                  pclath 000A                    status 0003                    wtemp0 007E  
        ?_LCD_Initialize 0070          __initialization 07FD             __end_of_main 07BB  
                 ??_main 0020                ??_LCDGoto 0077        __end_of_LCDPutCmd 06F7  
           LCDPutChar@ch 0075        __end_of_LCDPutStr 0737                   _ADCON0 001F  
                 _ADCON1 009F                   _ADRESH 001E                   _ADRESL 009E  
                 _ANSELH 0189             LCDPutStr@str 0078           _LCDWriteNibble 07BB  
 __end_of_LCDWriteNibble 07FD  __end_of__initialization 07FD                LCDGoto@ln 0076  
         __pcstackCOMMON 0070             ??_LCDPutChar 0073          ?_LCDWriteNibble 0071  
     __end_of_LCDPutChar 0708               __pmaintext 078E                  _LCDGoto 0762  
             __stringtab 0002         ??_LCD_Initialize 0076                  __ptext1 0737  
                __ptext2 071B                  __ptext3 06F7                  __ptext4 0762  
                __ptext5 06E7                  __ptext6 07BB                  __ptext7 0708  
                __ptext8 06DB            ?_ToggleEnable 0070                _LCDPutCmd 06E7  
              _LCDPutStr 071B     end_of_initialization 07FD           ??_ToggleEnable 0070  
              _PORTBbits 0006                _PORTCbits 0007               ?_LCDPutCmd 0070  
             ?_LCDPutStr 0070               LCDGoto@pos 007B               LCDPutStr@i 0077  
         _ADC_Initialize 06DB      start_initialization 07FD         ??_LCDWriteNibble 0072  
 __end_of_ADC_Initialize 06E7                 ?_LCDGoto 0076                ___latbits 0001  
          __pcstackBANK0 0020              ??_LCDPutCmd 0073              ??_LCDPutStr 0076  
   __end_of_ToggleEnable 071B          ?_ADC_Initialize 0070         LCDWriteNibble@ch 0072  
       LCDWriteNibble@rs 0071                __pstrings 0002              _LCDGoto$124 0079  
               _GO_nDONE 00F9              __stringbase 0007       __end_of__stringtab 0008  
             _LCDPutChar 06F7             _ToggleEnable 0708         ??_ADC_Initialize 0070  
              stringcode 0002                 stringdir 0002                 stringtab 0002  
